class LRUCache {
public:
    class node{
        public:
            int key;
            int value;
            node* next;
            node* prev;
        node(int key1,int value1){
            key = key1;
            value = value1;
        }
    };

    node* head = new node(-1,-1);
    node* tail = new node(-1,-1);

    unordered_map<int ,node*>mp;
    int cap;

    LRUCache(int capacity) {
        cap = capacity;
        head->next = tail;
        tail->prev = head;
    }
    
    void addnode(node* newnode){
        node* temp = head->next;
        newnode->next = temp;
        newnode->prev = head;
        head->next = newnode;
        temp->prev = newnode;
    }
    void deletenode(node* delnode){
        node* delnext = delnode->next;
        node* delprev = delnode->prev;
        delnext->prev = delprev;
        delprev->next = delnext;
    }

    int get(int key) {
        if(mp.find(key) != mp.end()){
            node* adsnode = mp[key];
            int res = adsnode->value;
            mp.erase(key);
            deletenode(adsnode);
            addnode(adsnode);
            mp[key] = head->next;
            return res;
        }
        return -1;
    }
    
    void put(int key, int value) {
        if(mp.find(key) != mp.end()){
            node* tempnode = mp[key];
            mp.erase(key);
            deletenode(tempnode);           
        }

        if(mp.size() == cap){          
            mp.erase(tail->prev->key);
            deletenode(tail->prev);
        }

        addnode(new node(key,value));
        mp[key] = head->next;
    }
};