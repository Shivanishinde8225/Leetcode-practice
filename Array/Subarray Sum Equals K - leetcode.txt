class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
       unordered_map<int ,int>s;
       int sum=0,count=0;
       for(auto it:nums){
           sum+=it;
           if(sum==k){ count++;}
           if(s.find(sum-k)!= s.end()){
               count+=s[sum-k];
           }
           s[sum]++;
       }
    return count;

    // better 
    // map<int,int>mp;
    // int sum = 0,maxlen = 0,n = nums.size();
    // for(int i = 0; i < n; i++){
    //     sum += nums[i];
    //     if(sum == k){
    //         maxlen = max(maxlen,i+1);
    //     }
    //     int prevsum = sum - k;
    //     if(mp.find(prevsum) != mp.end()){
    //         int len =i- mp[prevsum];
    //         maxlen = max(maxlen,len); 
    //     }
    //     if(mp.find(sum) == mp.end()){
    //         mp[sum] = i;
    //     }
        
    // }
    // return maxlen;

// brute force
    // int n = nums.size(),sum ,len = 0 ;
    // for(int i = 0; i < n; i++){
    //     sum = 0;
    //     for(int j = i ; j < n; j++){
    //         sum += nums[j];
    //         if(sum == k){
    //             len = max(len,j-i+1);
    //         }
    //     }     
    // }
    // return len;
    }
};