class Solution {
public:
    void merge(vector<int> &nums, int low, int mid, int high) {
            if (low >= high) return;
            int l = low, r = mid + 1, k = 0, size = high - low + 1;
            vector<int> sorted(size, 0);
            while (l <= mid and r <= high)
                sorted[k++] = nums[l] < nums[r] ? nums[l++] : nums[r++];
            while (l <= mid) 
                sorted[k++] = nums[l++];
            while (r <= high) 
                sorted[k++] = nums[r++];
            for (k = 0; k < size; k++)
                nums[k + low] = sorted[k];
        }
    void mergeSort(vector<int> &nums, int low, int high) {
            if (low >= high) return;
            int mid = (high - low) / 2 + low;
            mergeSort(nums, low, mid);
            mergeSort(nums, mid + 1, high);
            merge(nums, low, mid, high);
         }
    vector<int> sortArray(vector<int>& nums) {
        // brute force
        // merge sort
        // int n=nums.size();
        // mergeSort(nums,0,n-1);
        // return nums;

        // better 
        priority_queue<int ,vector<int>,greater<int>>que;
        for(auto it : nums){
            que.push(it);
        }
        for(int i = 0; i < nums.size(); i++){
            nums[i] = que.top();
            que.pop();
        }
        return nums;

        // sort(nums.begin(),nums.end());
        // return nums;
    }
};