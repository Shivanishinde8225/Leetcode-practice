class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        
        int size = m*n;
        
        int left = 0,right = n-1;
        int top = 0, bottom = m-1;
        vector<int>ans;
        
        int j = 0;
         while(j < size){
            for(int i = left; i <= right && j< size; i++){
                ans.push_back(matrix[top][i]);
                j++;
            }
            top++;
             
            for(int i = top; i <= bottom && j< size; i++){
                ans.push_back(matrix[i][right]);
                j++;
            }
            right--;
             
            for(int i = right; i >= left && j< size; i--){
                ans.push_back(matrix[bottom][i]);
                    j++;
            }
            bottom--;
             
           for(int i = bottom; i >= top && j< size; i--){
                    ans.push_back(matrix[i][left]);
                    j++;
            }
            left++;
        }
        
        
//         while(left <= right && top <= bottom){
//             for(int i = left; i <= right; i++){
//                 ans.push_back(matrix[top][i]);
//             }
//             top++;
//             for(int i = top; i <= bottom; i++){
//                 ans.push_back(matrix[i][right]);
//             }
//             right--;
//             if(top <= bottom){
//                 for(int i = right; i >= left; i--){
//                     ans.push_back(matrix[bottom][i]);
//                 }
//                 bottom--;
//             }
            
//             if(left <= right){
//                 for(int i = bottom; i >= top; i--){
//                     ans.push_back(matrix[i][left]);
//                 }
//                 left++;
//             }
//         }
      return ans;  
    }
};