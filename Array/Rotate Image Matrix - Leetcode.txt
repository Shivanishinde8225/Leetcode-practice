class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
//       brute force
         int n = matrix.size();
         vector<vector<int>>temp(n);
         // vector<vector<int>>temp(n,vector<int>(n));
        
         for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                temp[j][n-1-i] = matrix[i][j];
            }
         }
         for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                matrix[i][j] = temp[i][j];
            }
         }
                        
            
        
//         optimal
        
       
        int n = matrix.size();
        
//         transpose of matrix
        for(int i = 0; i < n-1; i++){
            for(int j = i+1; j < n; j++){
                // swap lower triangle or else original matrix as it is
                swap(matrix[i][j],matrix[j][i]);
            }
        }
//         reverse of matrix
        for(int i = 0; i < n; i++){
            reverse(matrix[i].begin(),matrix[i].end());
        }
        
        
    }
};